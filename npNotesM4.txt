--- Lesson 5-64 ---

Bind to custom property
in ex:
<div class="col-xs-12">
      <app-server-element 
      *ngFor="let item of serverElements"
      [element]="item"></app-server-element>
    </div>

    also need to declare element property to use with decorator @Input()  

    ex:
    export class ServerElementComponent implements OnInit {
      @Input()   element: {type: string, name: string, content: string};
    constructor() { } ...................

    and also import it from core:
    ex:
    import { Component, OnInit, Input } from '@angular/core';


--- Lesson 5-65 ---

To assing an alias (srvElement) use 

 @Input('srvElement') element: {type: string, name: string, content: string};

and 

<div class="col-xs-12">
      <app-server-element 
      *ngFor="let item of serverElements"
      [srvElement]="item"></app-server-element>
    </div>
  </div>
</div>

..........................

--- Lesson 5-67 ---

Binding to Custom Event (CRUCIAL because component communication is very important)

* in app.ts
...
need to create 2 methods  onServerAdded and onBlueprintAdded
so it will know from cockpit.html that button was clicked 
to create these functionality. 

...
ex:
export class AppComponent {
  
 serverElements = [{ type: 'server', name: 'TestServer', content: 'Judo test'}];

 onServerAdded(serverData: {serverName: string, serverContent: string}) {
  this.serverElements.push({
    type: 'server',
    name: serverData.serverName,
    content: serverData.serverContent
  });
}

onBlueprintAdded(blueprintData: {serverName: string, serverContent: string}) {
  this.serverElements.push({
    type: 'blueprint',
    name: blueprintData.serverName,
    content: blueprintData.serverContent
  });
}

** in app.html
....
here create 2 listeners (serverCreated and blueprintCreated)
it will look for changes in the app. listeners bind to the methods
prepared for this in the app.ts file and pass data with $event to catch the 
changes. Methods onServerAdded and onBlueprintAdded also expect this data 
(event or serverData with javascript object 
serverData: {serverName: string, serverContent: string})
...
ex:
<app-cockpit 
  (serverCreated)="onServerAdded($event)"
  (blueprintCreated)="onBlueprintAdded($event)"
  ></app-cockpit>

*** in cockpit.component.ts 
...........
inform parent component that new server 
or blueprint was Created. So in App component implement
2 methods  onServerAdded and onBlueprintAdded
We also need to create 2 new propertie: serverCreated and blueprintCreated
before we put @Input in front of them to mark them to set values from outside.
Now we doing the oposite. We have to make sure both properties are 
events we can emit. And to make them event we have to assing a new values
new EventEmitter. EventEmitter is an object in the Angular framework
which allows you to emit your own events.
EventEmitter must be imported from @angular/core
EventEmitter is a generic type use <>. and defind data
as
 @Output() serverCreated = new EventEmitter<{
    serverName: string, serverContent: string}>();
important to have () at the end to call a  constructor.
and
in the method add emit method. This will emit a new event of this type, 
so of the server created here using this eventEmitter. Just pass an object 

.....
ex:
export class CockpitComponent implements OnInit {
  @Output() serverCreated = new EventEmitter<{
    serverName: string, serverContent: string}>();
  @Output() blueprintCreated = new EventEmitter<{
    serverName: string, serverContent: string}>();

  newServerName = '';
  newServerContent = '';
  
  constructor() { }

  ngOnInit() {
  }

  onAddServer() {
    this.serverCreated.emit({ serverName: this.newServerName, 
      serverContent: this.newServerContent})
  }

  onAddBlueprint() {
    this.blueprintCreated.emit({ serverName: this.newServerName, 
      serverContent: this.newServerContent})
  }

**** in cockpit.component.html
...........
in here are emit our custom events. We are waiting for serverCreated 
or blueprintCreated events to fire on buttom click.
serverCreated and blueprintCreated are 2 properties in cockpit.html

...
ex:
<label>Server Name</label>
    <input type="text" class="form-control" [(ngModel)]="newServerName" />
    <label>Server Content</label>
    <input type="text" class="form-control" [(ngModel)]="newServerContent" />
    <br />
    <button class="btn btn-primary" (click)="onAddServer()">
      Add Server
    </button>
    <button class="btn btn-primary" (click)="onAddBlueprint()">
      Add Server Blueprint
    </button>

    ***********************************************


..........................

--- Lesson 5-68 ---

Assign alias to custom events


..........................

--- Lesson 5-00 ---


..........................

--- Lesson 5-00 ---


..........................

--- Lesson 5-00 ---


..........................

--- Lesson 5-00 ---


..........................

--- Lesson 5-00 ---


..........................

--- Lesson 5-00 ---


..........................

--- Lesson 5-00 ---

