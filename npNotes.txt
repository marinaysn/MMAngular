Angular Notes:

--- Lesson 1-6: ---

install new project :
	ng new my-first-app

Bring up Development server (while in the aangular project)
	ng serve

To add 'ngModel' to app.component.html
	in app.module.ts add 'import{ FormsModule } from '@angular/forms' at the top
	and FormsModule in 
	ex:
	imports: [
    BrowserModule,
    FormsModule
  ]

--- Lesson 1-10: ---

to instal bootstrap (local dev copy)
   npm i --save bootstrap
and to use it in angular.json file. under styles add path to node_modules:
	ex:
	"styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ],


--- Lesson 2-15: ---

to Add a component:
	1. Create a folder under App name (app > server)
	2. Create a file in the folder from 1.
	3. Name file same as folder then components and then extention 
		ts for typescript (server.component.ts)
	4. component is just a class.We should export this class to use it
		export class ServerComponent {
		}
	5. it needs a decorator @Component with valid import
	6. Then configure inside decorator with selector, templateUrl, etc


--- Lesson 2-16: ---

Components are used to build webPages and Modules to bind Components 
(or other peices)
Need to register component before using it (in app.module.ts)
add ServerComponent and imporrt to it

--- Lesson 2-18: ---

to autp generate new component from cli (new terminal)
1.open new terminal while app is still running
2. type in new terminal ng generate component <newComponent>
	or ng g c <newName>
3. CLI will auto create folder with all needed files in it


--- Lesson 2-19: ---

to work with templates: you can write html code inside typescript document
in servers.components.ts remove 'templateURL' and add 'template'
ex:
@Component({
  selector: 'app-servers',
  template: '<app-server></app-server><app-server></app-server>',
  styleUrls: ['./servers.component.css']
})

decorator must always have either templateURL or template

or 
ex2:
@Component({
  selector: 'app-servers',
  template: `
    <app-server></app-server>
      <p>Test</p>
    <app-server></app-server>`,
  styleUrls: ['./servers.component.css']
})

--- Lesson 2-20: ---

styles  can be set in external file app.component.css file
styles can also be overwritten inline 
in app.component.ts
ex:
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  // styleUrls: ['./app.component.css', './newStyle.css']

  styles: [`
    h3{
      color: green;
    }
  `]
})

NOTE: Styles or styleURLs must be an array [ '', '' ]

--- Lesson 2-21: ---

Learning decorator selector:
in servers.component.ts change selector to be an attribute: '[app-servers]' instead of selector: 'app-root',
ex:
@Component({
  selector: '[app-servers]',
  template: `
    <app-server></app-server>
      <p>Test</p>
    <app-server></app-server>`,
  styleUrls: ['./servers.component.css']
})

We also need to use now this selector as an attribute in app.component.html file asex:
	ex:
	<!-- <app-servers> loading...</app-servers> -->
      <div app-servers></div>

or you can use it as class:
	selector: '.app-servers',
